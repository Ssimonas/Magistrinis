#setwd('C:\\Users\\Simonas\\Desktop\\Magistrinis\\Magistras GIT')
# Set working directory to script directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
TIME <- Sys.time()
myData <- read.csv('data\\doodle\\im2014_utf8.csv',header=T, stringsAsFactors = FALSE, sep=',')
#!!!!!!!!!!
# pardavimai_pvm_dekl        : chr  " " " " " " " " ...
# pvm_dekl_36                : chr  " " " " " " " " ...
# pirkimai_pvm_dekl          : chr  " " " " " " " " ...
######################## 2. FIX VARIABLES #######################
# Numbers: 1,000.00 are read as chars (change to 1000.00?)
myData$pardavimai_pvm_dekl <- as.numeric(gsub(",","",myData$pardavimai_pvm_dekl))
myData$pvm_dekl_36 <- as.numeric(gsub(",","",myData$pvm_dekl_36))
myData$pirkimai_pvm_dekl <- as.numeric(gsub(",","",myData$pirkimai_pvm_dekl))
######################## 3. REMOVE EMPTY OR NON-IMPORTANT VARIABLES (for mixed - month-year data) #######################
# NAUJAS_PVM_MOK (?)
# KLN_KLNT_TYPE
# FIN_ATASKAITA
# gpm, pvm, pm, akc, kiti - empty values
# B_SANAUDOS - no data in 2019, 2018 datasets (???)
# VKR_SEKCIJA, EV1_ID_NAME_TR - similiar variables (EV1_ID_NAME_TR - more detailed VKR_SEKCIJA)
# APRASYMAS_FORMA == KODAS_FORMA (drop APRASYMAS_FORMA)
library(dplyr)
myData <- select(myData, -c(KLN_KLNT_TYPE, NAUJAS_PVM_MOK, FIN_ATASKAITA, gpm, pvm, pm, akc, kiti, VKR_SEKCIJA, APRASYMAS_FORMA))
library(dplyr)
myDataYear <- select(filter(myData, str_detect(myData$DATE, "DEC")),everything())
#myData %>% filter(str_detect(DATE, "DEC"))
library(stringr)
library(dplyr)
myDataYear <- select(filter(myData, str_detect(myData$DATE, "DEC")),everything())
myDataMonth <- select(filter(myData, str_detect(myData$DATE, "DEC",negate = TRUE)),everything())
write.csv(myDataYear, file="im2014_met.csv", row.names = FALSE)
write.csv(myDataMonth, file="im2014_men.csv", row.names = FALSE)
empty_values <- sapply(myDataYear, function(x){sum(is.na(x))})
empty_values[empty_values == nrow(myDataYear)]
length(empty_values[empty_values == nrow(myDataYear)])
myData <- read.csv('data\\raw\\im2015_utf8.csv',header=T, stringsAsFactors = FALSE, sep=',')
#!!!!!!!!!!
# pardavimai_pvm_dekl        : chr  " " " " " " " " ...
# pvm_dekl_36                : chr  " " " " " " " " ...
# pirkimai_pvm_dekl          : chr  " " " " " " " " ...
######################## 2. FIX VARIABLES #######################
# Numbers: 1,000.00 are read as chars (change to 1000.00?)
myData$pardavimai_pvm_dekl <- as.numeric(gsub(",","",myData$pardavimai_pvm_dekl))
myData$pvm_dekl_36 <- as.numeric(gsub(",","",myData$pvm_dekl_36))
myData$pirkimai_pvm_dekl <- as.numeric(gsub(",","",myData$pirkimai_pvm_dekl))
######################## 3. REMOVE EMPTY OR NON-IMPORTANT VARIABLES (for mixed - month-year data) #######################
# NAUJAS_PVM_MOK (?)
# KLN_KLNT_TYPE
# FIN_ATASKAITA
# gpm, pvm, pm, akc, kiti - empty values
# B_SANAUDOS - no data in 2019, 2018 datasets (???)
# VKR_SEKCIJA, EV1_ID_NAME_TR - similiar variables (EV1_ID_NAME_TR - more detailed VKR_SEKCIJA)
# APRASYMAS_FORMA == KODAS_FORMA (drop APRASYMAS_FORMA)
library(dplyr)
myData <- select(myData, -c(KLN_KLNT_TYPE, NAUJAS_PVM_MOK, FIN_ATASKAITA, gpm, pvm, pm, akc, kiti, VKR_SEKCIJA, APRASYMAS_FORMA))
myDataYear <- select(filter(myData, str_detect(myData$DATE, "DEC")),everything())
myDataMonth <- select(filter(myData, str_detect(myData$DATE, "DEC",negate = TRUE)),everything())
write.csv(myDataYear, file="im2015_met.csv", row.names = FALSE)
write.csv(myDataMonth, file="im2015_men.csv", row.names = FALSE)
####### This script transforms selected data (extracted earlier) - to be suitbale for machine learning models.
YEAR_TO_PREDICT = 2018
NUM_OF_YEARS_TO_USE = 3
seq(YEAR_TO_PREDICT-NUM_OF_YEARS_TO_USE, NUM_OF_YEARS_TO_USE, by=1)
seq(2015, 2018, by=1)
seq(YEAR_TO_PREDICT-NUM_OF_YEARS_TO_USE, YEAR_TO_PREDICT, by=1)
data_range <- seq(YEAR_TO_PREDICT-NUM_OF_YEARS_TO_USE, YEAR_TO_PREDICT, by=1)
data_range
filePaths <- list.files(data_range, "\\.csv$", full.names = TRUE)
main_data <- lapply(filePaths, read.csv)
### read all yearly data
filePaths <- c('data\\raw\\im2015_utf8.csv','data\\raw\\im2016_utf8.csv','data\\raw\\im2017_utf8.csv','data\\raw\\im2018_utf8.csv')
main_data <- lapply(filePaths, read.csv)
View(main_data)
YEAR_TO_PREDICT = 2018 # This year will not be used for prediction
NUM_OF_YEARS_TO_USE = 1 # X more years will be used for training
data_range <- seq(YEAR_TO_PREDICT-NUM_OF_YEARS_TO_USE, YEAR_TO_PREDICT, by=1)
data_range
### read all yearly data
paste0('data\\raw\\im',data_range,'_utf8.csv')
myData <- read.csv('data\\raw\\im2014_utf8.csv',header=T, stringsAsFactors = FALSE, sep=',')
myData$pardavimai_pvm_dekl <- as.numeric(gsub(",","",myData$pardavimai_pvm_dekl))
myData$pvm_dekl_36 <- as.numeric(gsub(",","",myData$pvm_dekl_36))
myData$pirkimai_pvm_dekl <- as.numeric(gsub(",","",myData$pirkimai_pvm_dekl))
######################## 3. REMOVE EMPTY OR NON-IMPORTANT VARIABLES (for mixed - month-year data) #######################
# NAUJAS_PVM_MOK (?)
# KLN_KLNT_TYPE
# FIN_ATASKAITA
# gpm, pvm, pm, akc, kiti - empty values
# B_SANAUDOS - no data in 2019, 2018 datasets (???)
# VKR_SEKCIJA, EV1_ID_NAME_TR - similiar variables (EV1_ID_NAME_TR - more detailed VKR_SEKCIJA)
# APRASYMAS_FORMA == KODAS_FORMA (drop APRASYMAS_FORMA)
library(dplyr)
myData <- select(myData, -c(KLN_KLNT_TYPE, NAUJAS_PVM_MOK, FIN_ATASKAITA, gpm, pvm, pm, akc, kiti, VKR_SEKCIJA, APRASYMAS_FORMA))
#myData %>% filter(str_detect(DATE, "DEC"))
library(stringr)
library(dplyr)
myDataYear <- select(filter(myData, str_detect(myData$DATE, "DEC")),everything())
myDataMonth <- select(filter(myData, str_detect(myData$DATE, "DEC",negate = TRUE)),everything())
write.csv(myDataYear, file="data\\raw\\yearly\\2014_met.csv", row.names = FALSE)
write.csv(myDataYear, file="data\\raw\\yearly\\2014_met.csv", row.names = FALSE)
write.csv(myDataMonth, file="data\\raw\\monthly\\2014_men.csv", row.names = FALSE)
myData <- read.csv('data\\raw\\im2015_utf8.csv',header=T, stringsAsFactors = FALSE, sep=',')
myData$pardavimai_pvm_dekl <- as.numeric(gsub(",","",myData$pardavimai_pvm_dekl))
myData$pvm_dekl_36 <- as.numeric(gsub(",","",myData$pvm_dekl_36))
myData$pirkimai_pvm_dekl <- as.numeric(gsub(",","",myData$pirkimai_pvm_dekl))
######################## 3. REMOVE EMPTY OR NON-IMPORTANT VARIABLES (for mixed - month-year data) #######################
# NAUJAS_PVM_MOK (?)
# KLN_KLNT_TYPE
# FIN_ATASKAITA
# gpm, pvm, pm, akc, kiti - empty values
# B_SANAUDOS - no data in 2019, 2018 datasets (???)
# VKR_SEKCIJA, EV1_ID_NAME_TR - similiar variables (EV1_ID_NAME_TR - more detailed VKR_SEKCIJA)
# APRASYMAS_FORMA == KODAS_FORMA (drop APRASYMAS_FORMA)
library(dplyr)
myData <- select(myData, -c(KLN_KLNT_TYPE, NAUJAS_PVM_MOK, FIN_ATASKAITA, gpm, pvm, pm, akc, kiti, VKR_SEKCIJA, APRASYMAS_FORMA))
myDataYear <- select(filter(myData, str_detect(myData$DATE, "DEC")),everything())
myDataMonth <- select(filter(myData, str_detect(myData$DATE, "DEC",negate = TRUE)),everything())
write.csv(myDataYear, file="data\\raw\\yearly\\2015_met.csv", row.names = FALSE)
write.csv(myDataMonth, file="data\\raw\\monthly\\2015_men.csv", row.names = FALSE)
myData <- read.csv('data\\raw\\im2016_utf8.csv',header=T, stringsAsFactors = FALSE, sep=',')
myData$pardavimai_pvm_dekl <- as.numeric(gsub(",","",myData$pardavimai_pvm_dekl))
myData$pvm_dekl_36 <- as.numeric(gsub(",","",myData$pvm_dekl_36))
myData$pirkimai_pvm_dekl <- as.numeric(gsub(",","",myData$pirkimai_pvm_dekl))
######################## 3. REMOVE EMPTY OR NON-IMPORTANT VARIABLES (for mixed - month-year data) #######################
# NAUJAS_PVM_MOK (?)
# KLN_KLNT_TYPE
# FIN_ATASKAITA
# gpm, pvm, pm, akc, kiti - empty values
# B_SANAUDOS - no data in 2019, 2018 datasets (???)
# VKR_SEKCIJA, EV1_ID_NAME_TR - similiar variables (EV1_ID_NAME_TR - more detailed VKR_SEKCIJA)
# APRASYMAS_FORMA == KODAS_FORMA (drop APRASYMAS_FORMA)
library(dplyr)
myData <- select(myData, -c(KLN_KLNT_TYPE, NAUJAS_PVM_MOK, FIN_ATASKAITA, gpm, pvm, pm, akc, kiti, VKR_SEKCIJA, APRASYMAS_FORMA))
myDataYear <- select(filter(myData, str_detect(myData$DATE, "DEC")),everything())
myDataMonth <- select(filter(myData, str_detect(myData$DATE, "DEC",negate = TRUE)),everything())
write.csv(myDataYear, file="data\\raw\\yearly\\2015_met.csv", row.names = FALSE)
write.csv(myDataMonth, file="data\\raw\\monthly\\2015_men.csv", row.names = FALSE)
myDataYear <- select(filter(myData, str_detect(myData$DATE, "DEC")),everything())
myDataMonth <- select(filter(myData, str_detect(myData$DATE, "DEC",negate = TRUE)),everything())
write.csv(myDataYear, file="data\\raw\\yearly\\2016_met.csv", row.names = FALSE)
write.csv(myDataMonth, file="data\\raw\\monthly\\2016_men.csv", row.names = FALSE)
myData <- read.csv(paste0('data\\raw\\im',YEAR_DATA,'_utf8.csv'),header=T, stringsAsFactors = FALSE, sep=',')
YEAR_DATA = 2015
myData <- read.csv(paste0('data\\raw\\im',YEAR_DATA,'_utf8.csv'),header=T, stringsAsFactors = FALSE, sep=',')
myData$pardavimai_pvm_dekl <- as.numeric(gsub(",","",myData$pardavimai_pvm_dekl))
myData$pvm_dekl_36 <- as.numeric(gsub(",","",myData$pvm_dekl_36))
myData$pirkimai_pvm_dekl <- as.numeric(gsub(",","",myData$pirkimai_pvm_dekl))
myData <- select(myData, -c(KLN_KLNT_TYPE, NAUJAS_PVM_MOK, FIN_ATASKAITA, gpm, pvm, pm, akc, kiti, VKR_SEKCIJA, APRASYMAS_FORMA))
myDataYear <- select(filter(myData, str_detect(myData$DATE, "DEC")),everything())
myDataMonth <- select(filter(myData, str_detect(myData$DATE, "DEC",negate = TRUE)),everything())
paste0('data\\raw\\yearly\\',YEAR_DATA,'_met.csv')
write.csv(myDataYear, paste0('data\\raw\\yearly\\',YEAR_DATA,'_met.csv'), row.names = FALSE)
write.csv(myDataMonth, paste0('data\\raw\\monthly\\',YEAR_DATA,'_met.csv'), row.names = FALSE)
YEAR_DATA = 2017
myData <- read.csv(paste0('data\\raw\\im',YEAR_DATA,'_utf8.csv'),header=T, stringsAsFactors = FALSE, sep=',')
myData$pardavimai_pvm_dekl <- as.numeric(gsub(",","",myData$pardavimai_pvm_dekl))
myData$pvm_dekl_36 <- as.numeric(gsub(",","",myData$pvm_dekl_36))
myData$pirkimai_pvm_dekl <- as.numeric(gsub(",","",myData$pirkimai_pvm_dekl))
myData <- select(myData, -c(KLN_KLNT_TYPE, NAUJAS_PVM_MOK, FIN_ATASKAITA, gpm, pvm, pm, akc, kiti, VKR_SEKCIJA, APRASYMAS_FORMA))
myDataYear <- select(filter(myData, str_detect(myData$DATE, "DEC")),everything())
myDataMonth <- select(filter(myData, str_detect(myData$DATE, "DEC",negate = TRUE)),everything())
write.csv(myDataYear, paste0('data\\raw\\yearly\\',YEAR_DATA,'_met.csv'), row.names = FALSE)
write.csv(myDataMonth, paste0('data\\raw\\monthly\\',YEAR_DATA,'_met.csv'), row.names = FALSE)
YEAR_DATA = 2018
myData <- read.csv(paste0('data\\raw\\im',YEAR_DATA,'_utf8.csv'),header=T, stringsAsFactors = FALSE, sep=',')
myData$pardavimai_pvm_dekl <- as.numeric(gsub(",","",myData$pardavimai_pvm_dekl))
myData$pvm_dekl_36 <- as.numeric(gsub(",","",myData$pvm_dekl_36))
myData$pirkimai_pvm_dekl <- as.numeric(gsub(",","",myData$pirkimai_pvm_dekl))
myData <- select(myData, -c(KLN_KLNT_TYPE, NAUJAS_PVM_MOK, FIN_ATASKAITA, gpm, pvm, pm, akc, kiti, VKR_SEKCIJA, APRASYMAS_FORMA))
myDataYear <- select(filter(myData, str_detect(myData$DATE, "DEC")),everything())
myDataMonth <- select(filter(myData, str_detect(myData$DATE, "DEC",negate = TRUE)),everything())
write.csv(myDataYear, paste0('data\\raw\\yearly\\',YEAR_DATA,'_met.csv'), row.names = FALSE)
write.csv(myDataMonth, paste0('data\\raw\\monthly\\',YEAR_DATA,'_men.csv'), row.names = FALSE)
YEAR_DATA = 2015
myData <- read.csv(paste0('data\\raw\\im',YEAR_DATA,'_utf8.csv'),header=T, stringsAsFactors = FALSE, sep=',')
myData$pardavimai_pvm_dekl <- as.numeric(gsub(",","",myData$pardavimai_pvm_dekl))
myData$pvm_dekl_36 <- as.numeric(gsub(",","",myData$pvm_dekl_36))
myData$pirkimai_pvm_dekl <- as.numeric(gsub(",","",myData$pirkimai_pvm_dekl))
myData <- select(myData, -c(KLN_KLNT_TYPE, NAUJAS_PVM_MOK, FIN_ATASKAITA, gpm, pvm, pm, akc, kiti, VKR_SEKCIJA, APRASYMAS_FORMA))
myDataYear <- select(filter(myData, str_detect(myData$DATE, "DEC")),everything())
myDataMonth <- select(filter(myData, str_detect(myData$DATE, "DEC",negate = TRUE)),everything())
write.csv(myDataYear, paste0('data\\raw\\yearly\\',YEAR_DATA,'_met.csv'), row.names = FALSE)
write.csv(myDataMonth, paste0('data\\raw\\monthly\\',YEAR_DATA,'_men.csv'), row.names = FALSE)
### read all yearly data
paste0('data\\raw\\im',data_range,'_utf8.csv')
### read all yearly data
filePaths <- paste0('data\\raw\\yearly',data_range,'_met.csv')
filePaths
YEAR_TO_PREDICT = 2018 # This year will not be used for prediction
NUM_OF_YEARS_TO_USE = 3 # X more years will be used for training
data_range <- seq(YEAR_TO_PREDICT-NUM_OF_YEARS_TO_USE, YEAR_TO_PREDICT, by=1)
### read all yearly data
filePaths <- paste0('data\\raw\\yearly',data_range,'_met.csv')
filePaths <- c('data\\raw\\im2015_utf8.csv','data\\raw\\im2016_utf8.csv','data\\raw\\im2017_utf8.csv','data\\raw\\im2018_utf8.csv')
### read all yearly data
filePaths <- paste0('data\\raw\\yearly',data_range,'_met.csv')
filePaths
### read all yearly data
filePaths <- paste0('data\\raw\\yearly\\',data_range,'_met.csv')
filePaths
main_data <- lapply(filePaths, read.csv)
View(main_data)
NUM_OF_YEARS_TO_USE = 2 # X more years will be used for training
data_range <- seq(YEAR_TO_PREDICT-NUM_OF_YEARS_TO_USE, YEAR_TO_PREDICT, by=1)
### read all yearly data
filePaths <- paste0('data\\raw\\yearly\\',data_range,'_met.csv')
main_data <- lapply(filePaths, read.csv)
data_range
View(main_data)
head(main_data[[1]])
head(main_data[[1]],1)
head(main_data[[1]],1,1)
head(main_data[[,1]],1)
head(main_data[[1][1]],1)
head(main_data[[1]],1)
head(main_data[[1][1]],1)
head(main_data[[1],[1]],1)
head(main_data[[1]],1)
head(main_data[,[1]],1)
data <- main_data[[1]]
head(data)
head(data[2,1])
head(data[,1])
## [[1]] - 2015, [[2]] - 2016 ir t.t.
colnames(main_data)[1]
colnames(data)[1]
colnames(data)[1] <- ID
colnames(data)[1] <- "ID"
colnames(data)[1]
head(data[,1])
colnames(main_data[[1]])[1] <- "ID"
colnames(main_data[[2]])[1] <- "ID"
colnames(main_data[[3]])[1] <- "ID"
colnames(main_data[[4]])[1] <- "ID"
View(data)
test <- merge(main_data[[1]],main_data[[2]], by = "ID", all = TRUE)
colnames(test)
test <- merge(main_data[[1]],main_data[[2]], by = "ID", all = TRUE, suffixes = c("_2015","_2016"))
colnames(test)
data <- main_data[[2]]
compare(main_data[[1]],main_data[[2]],allowAll=TRUE)
library(compare)
install.packages("compare")
library(compare)
compare(main_data[[1]],main_data[[2]],allowAll=TRUE)
require(sqldf)
install.packages("sqldf")
require(sqldf)
sqldf('SELECT * FROM main_data[[1]] INTERSECT SELECT * FROM main_data[[2]]')
data2 <- main_data[[2]]
data1 <- main_data[[1]]
sqldf('SELECT * FROM data1 INTERSECT SELECT * FROM data2')
data2 <- main_data[[2]]$ID
data1 <- main_data[[1]]$ID
sqldf('SELECT * FROM data1 INTERSECT SELECT * FROM data2')
data2 <- main_data[[2]]$ID
data1 <- main_data[[1]]$ID
sqldf('SELECT * FROM data1 INTERSECT SELECT * FROM data2')
compare(data1,data2,allowAll=TRUE)
compare(data2,data1,allowAll=TRUE)
setdiff(data2,data1)
setdiff(data1,data2)
test <- merge(main_data[[1]],main_data[[2]], by = "ID", all = TRUE, suffixes = c("_2015","_2016"))
setdiff(data2,data1)
test <- merge(test,main_data[[3]], by = "ID", all = TRUE, suffixes = c("","_2017"))
colnames(test)
test <- merge(main_data[[1]],main_data[[2]], by = "ID", all = TRUE, suffixes = c("_2015","_2016"))
test2 <- merge(test,main_data[[3]], by = "ID", all = TRUE, suffixes = c("_2017"))
colnames(test2)
test <- merge(main_data[[1]],main_data[[2]], by = "ID", all = TRUE, suffixes = c("_2015","_2016"))
colnames(test)
test2 <- merge(test,main_data[[3]], by = "ID", all = TRUE, suffixes = c(" ","_2017"))
colnames(test2)
test2 <- merge(test,main_data[[3]], by = "ID", all = TRUE, suffixes = c("_","_2017"))
colnames(test2)
data_range
colnames(main_data[[4]])[1] <- "ID"
data2015 <- paste(colnames(main_data[[1]]), data_range[0],sep="_")
data2015 <- main_data[[1]]
colnames(data2015)
colnames(data2015) <- paste(colnames(main_data[[1]]), data_range[0],sep="_")
colnames(data2015)
colnames(data2015) <- paste(colnames(main_data[[1]]), data_range[1],sep="_")
colnames(data2015)
data2016 <- main_data[[1]]
data2017 <- main_data[[2]]
data2018 <- main_data[[3]]
colnames(data2016) <- paste(colnames(main_data[[1]]), data_range[1],sep="_")
colnames(data2017) <- paste(colnames(main_data[[2]]), data_range[2],sep="_")
colnames(data2018) <- paste(colnames(main_data[[3]]), data_range[3],sep="_")
colnames(data2016)
colnames(data2017)
colnames(data2018)
test <- merge(data2016,data2017, by = "ID", all = TRUE, suffixes = c("_2015","_2016"))
colnames(data2016)[1] <- "ID"
colnames(data2017)[1] <- "ID"
colnames(data2018)[1] <- "ID"
test <- merge(data2016, data2017, by = "ID", all = TRUE, suffixes = c("_2015","_2016"))
test2 <- merge(test,data2018, by = "ID", all = TRUE, suffixes = c("_22222","_2017"))
colnames(test)
colnames(test2)
write.csv(myDataYear, paste0('data\\raw\\yearly\\2016-2018_met.csv'), row.names = FALSE)
write.csv(test2, paste0('data\\raw\\yearly\\2016-2018_met.csv'), row.names = FALSE)
